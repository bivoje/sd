#!/bin/bash

WKDIR=.sd

. tester

alias b_argn='__b_argn $#'

function __b_argn {
  argn 2

  if [ $1 -lt $2 ]; then
    echo you need more argument
    echo read manual !
    return 1
  elif [ $1 -gt $2 ]; then
    echo you supplied too many argument
    echo read manual !
    return 1
  fi
  return 0
}

function set_var {
  argn 2

  set_fig $1 $2
}

function get_vars {
  argn 0

  local varname=
  local varvalue=

  while read line; do
    varname=`echo $line | cut -d= -f1`
    varvalue=`expr $line : "varname=\(.*\)$"`
    echo $varname = \"$varvalue\"
  done < $WKDIR/fig
}

function help_message {
  cat help_message.txt
}

function interactive_init {
  argn 0

  # tester parts

  if [ -d $WKDIR ]; then
    echo sd repository already exist!
    echo if you want to restart try \"remove\" and then \"init\" again
    return 1
  fi

  mkdir $WKDIR
  mkdir $WKDIR/snap
  touch $WKDIR/fig

  srccnds=`ls | grep ".\+\.[a-z]\+$"`
  if [ 1 == `echo $srccnds | wc -l` ]; then
    echo it seems you have only one file in this directory.
    echo -n "do you want to start with \"$srccnds\"? (y/n) "
    read ans
    if [[ "$ans" =~ [yY].* ]]; then
      echo "SOURCENAME=$srccnds" >> $WKDIR/fig
    fi
  fi
}

function interactive_remove {
  argn 0

  if ! [ -d $WKDIR ]; then
    echo "there's nothing to remove on this directory"
    return
  fi

  echo -n "do you really want to erase all data achieved by sd? (y/n) "
  read ans
  if ! [[ "$ans" =~ [yY].* ]]; then echo "removing halted"; return; fi
  echo -n "are you sure?? sincerely ALL the data would be erased. (y/n) "
  read ans
  if ! [[ "$ans" =~ [yY].* ]]; then echo "removing halted"; return; fi
  echo "there's no way you can retrieve removed data."
  echo -n "final confirm required. type EXACTLY! (YES/NO) "
  read ans
  if [ "$ans" != "YES" ]; then echo "removing halted"; return; fi

  echo eliminating start!

  rm -rf $WKDIR

  echo eliminating done!
}

if [ $# == 0 ]; then
  help_message
  exit
fi

case $1 in
  "init"  ) interactive_init; exit ;;
  "remove") interactive_remove; exit ;;
esac

if v_load_tester; then
  # erro occured
  case $? in
    # error parsing
    1 ) echo no sd repository found!
        echo if you want to start, \"sd init\" ;;
    2 ) echo sd repository damaged..  you need to rebuild whole
        echo using \"sd remove\" and \"sd init\" ;;
    3 ) echo yousr source file extension unrecognizable!
        echo "re-set manually by \"sd set SOURCENAME <srcname>\"" ;;
    * ) exit $? ;;
  esac
  exit
fi

case $1 in
  # compile

  #need more gentle version of arng for user
  "co" ) b_argn 1 && autocompile ;;
  "te" ) b_argn 1 && autotesting ;;

  "set") b_argn 3 && set_var $2 $3 ;;
  "get") if [ $# == 1 ]; then get_vars;
         else for i in `seq 2 $#`; do echo ${!i} = `get_fig ${!i}`; done
         fi ;;

  "help") help_message ;;
  "--help") help_message ;;

  *    ) echo try command \"sd --help\"
esac
