#!/bin/bash

# this is a tester module for sd

# conventions
# get..    name denotes functions which
#          put value to stdout
# set..    name denotes functions which 
#          set the global variable
# set..i   name denotes functions which
#          will set if variable not previously set
# argn     function - which actually alias -
#          checks proper number of argument was given
# assert   same as ASSERT macro in C language
#          mute on un-debugging not supported
#          use with string of statement to evaluate

# exporting variables
# { SOURCENAME
# , EXECNAME
# , CMPLNEED
#     0 doesn't needed
#     1 exec not exist
#     2 src modified
#     3 exec has created manually
# }

shopt -s expand_aliases
alias argn='_argn $0 $LINENO $#'
alias assert='_assert $0 $LINENO'

function _argn {
  if [ $# != 4 ]; then
    echo ARGNERROR! on $2 th line of \"$1\"
    if [ $# == 3 ]; then
      echo Too little arguments
    else echo Too many arguments; fi
    exit
  elif [ $3 != $4 ]; then
    echo ARGERROR! on $2 th line of \"$1\"
    echo required $4 but given $3
    exit
  fi
}

function _assert {
  if [ $# != 3 ]; then
    echo ASSERTERROR! on $2 th line of \"$1\"
    if [ $# == 2 ]; then
      echo Too little arguments
    else echo Too many arguments; fi
    exit
  elif ! [ $3 ]; then
    echo ASSERTION FAILED! on $2 th line of \"$1\"
    echo of assertion \"$3\"
    exit
  fi
}

function getsrcmoddate {
echo ""
#TODO
}

function getexecmoddate {
echo ""
#TODO
}

function uptsrcmoddate {
echo ""
#TODO
}

function upexecmoddate {
echo ""
#TODO
}

function getextension {
  argn 1

  echo $1 | rev | cut -s -d '.' -f 1 | rev
}

function setsrcexecnamei {
  argn 0

  # if variable already not set
  SOURCENAME=${SOURCENAME:-main.c}
  EXECNAME=${EXECNAME:-main}
}

function getcmplcmdfromext {
  argn 1

  local cmplcmd=
  local ext=$1
  local map=(
    "c   gcc $SOURCENAME -o $EXECNAME"
    "cpp gcc $SOURCENAME -o $EXECNAME"
    "hs  ghc $SOURCENAME -o $EXECNAME"
    "lhs ghc $SOURCENAME -o $EXECNAME"
    ) 

  for val in "${map[@]}"; do
    if [ `echo $val | cut -s -d ' ' -f 1` == $ext ]; then
      cmplcmd=`expr "$val" : "$ext[[:blank:]]\+\(.*\)"`
      break
    fi
  done

  echo $cmplcmd
}

function setcmplcmdi { #src name
  argn 0

  local ext=`getextension $SOURCENAME`
  local ncmplcmd=`getcmplcmdfromext $ext`
  CMPLCMD=${CMPLCMD:-$ncmplcmd}
}

function setcmplneed { # src,exec name
  argn 0

  local srcmoddate=
  local osrcmoddate=
  local execmoddate=
  local oexecmoddate=

  if ! [ -e $EXECNAME ]; then
    CMPLNEED=1
  else
    srcmoddate=`stat $SOURCENAME -c %y`
    osrcmoddate=`getsrcmoddate`
    if [ "$srcmoddate" != "$osrcmoddate" ]; then
      CMPLNEED=2
    else
      execmoddate=`stat $EXECNAME -c %y`
      oexecmoddate=`getexecmoddate`
      # user might have compiled by him/herself
      if [ "$execmoddate" != "$oexecmoddate" ]; then
        CMPLNEED=3
      else
        CMPLNEED=0
      fi
    fi
  fi
}

function compile {
  argn 0

  $CMPLCMD
  #TODO
}

function testing {
echo ""
#TODO
}

function autocompile { # src/exec name
  argn 0

  setcmplneed
  #CHECKME
  if [ $CMPLNEED == 3 ]; then
    echo you have executable compiled manually!
    while true; do
      read -p "would you compile it again with sd? \(y or n\)" ans
      case $ans in
        [Yy]* ) setcmplcmdi; compile; break;;
        [Nn]* ) break;;
        *     ) echo please answer y or n;;
      esac
    done

  elif [ $CMPLNEED != 0 ]; then
    setcmplcmdi
    compile
  fi
}
