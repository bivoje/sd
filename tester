#!/bin/bash

# tester module for sd
# exporting variables
# {
#   SOURCENAME
#   EXECNAME
#   TESTIONAME
#   WKDIR
#     /snap
#     fig
# }

shopt -s expand_aliases
alias argn='__argn $0 $LINENO $#'

WKDIR=.sd

function __argn {
  if [ $# != 4 ]; then
    echo ARGNERROR! on $2 th line of \"$1\"
    if [ $# == 3 ]; then
      echo Too little arguments
    else echo Too many arguments; fi
    exit
  elif ! [[ "$4" =~ ^[0-9]+$ ]] ; then
    echo ERROR of \"$4\"
    echo on $2 th line of \"$1\"
    exit
  elif [ $3 != $4 ]; then
    echo ARGERROR! on $2 th line of \"$1\"
    echo required $4 but given $3
    exit
  fi
}

function set_fig {
  argn 2

  local num=`grep $WKDIR/fig -e "^$1=" -c`

  if [ $num == 1 ]; then
    sed "s/^$1=.*$/$1=$2/" $WKDIR/fig > $WKDIR/fig.m
    mv $WKDIR/fig.m $WKDIR/fig
  elif [ $num == 0 ]; then
    echo "$1=$2" >> $WKDIR/fig
  else
    echo duplicated fig \"$1\" apeared!
  fi
}

function get_fig {
  local line=`grep $WKDIR/fig -e "^$1"`
  expr "$line" : "^$1=\(.*\)$"
}

function b_ismodified {
  argn 1

  # diff will return 2 if there's no such file
  diff "$1" $WKDIR/snap/"$1" &> /dev/null
  return $?
}

function upmodstate {
  argn 1

  cp "$1" $WKDIR/snap/"$1"
}

function b_interactive_vertifysrc {
  argn 0

  if ! [ -f "$SOURCENAME" ]; then
    echo "can't find source file \"$SOURCENAME\""
    echo "re-set the correct source name manually"
    echo "using command \"sd set SOURCENAME <sourcename>\""
    return 1
  else
    return 0
  fi
}

# echos nothing on failure
function getextension {
  argn 1

  echo $1 | rev | cut -s -d '.' -f 1 | rev
}

function setsrcexecnamei {
  argn 0

  # if variable already not set
  SOURCENAME=${SOURCENAME:-main.c}
  EXECNAME=${EXECNAME:-main}
}

function setcmplcmdfromext {
  argn 1

  local ext=$1

  case $1 in
    c   ) CMPLCMD=(gcc "$SOURCENAME" -o "$EXECNAME") ;;
    cpp ) CMPLCMD=(g++ "$SOURCENAME" -o "$EXECNAME") ;;
    hs  ) CMPLCMD=(ghc "$SOURCENAME" -o "$EXECNAME") ;;
    lhs ) CMPLCMD=(ghc "$SOURCENAME" -o "$EXECNAME") ;;
    sh  ) CMPLCMD=(cp "$SOURCENAME" "$EXECNAME" \&\& chmod u+x "$EXECNAME") ;;
  esac
}

function setcmplneed {
  argn 0

  if ! [ -x "$EXECNAME" ]; then
    CMPLNEED=1
  else
    if ! b_ismodified "$SOURCENAME" ; then
      CMPLNEED=2
    else
      # user might have compiled by him/herself
      if ! b_ismodified "$EXECNAME" ; then
        CMPLNEED=3
      else
        CMPLNEED=0
      fi
    fi
  fi

# CMPLNEED = 0 doesn't needed
#            1 exec not exist
#            2 src modified
#            3 exec has created manually
}

function checktestios {
  echo testionum: $TESTIONUM
  for i in `seq $TESTIONUM`; do
    echo INPUT $i ==============
    echo -e ${TESTIS[$[i-1]]}
    echo OUTPUT $i -------------
    echo -e ${TESTOS[$[i-1]]}
  done
  echo done! =================
}

function v_settestios {
  argn 0

  local wheio=0 # parsing on input(-1), comment(0), output(1)
  #TODO wheio=-1 this enales ommiting first =====
  local wheiof=0 # explicit 0, successive 1
  local lineno=0 # for error reporting
  local readnum=0
  local error=0
  TESTIONUM=0 # used as index of TESTIS, TESTOS in the loop
  # erasing previouse variables
  TESTIS[0]=
  TESTOS[0]=

  while read line; do
    ((lineno++))
    case $wheio in
      0 ) # comment
        if [[ "$line" =~ ^==+ ]]; then
          wheio=-1
          readnum=`expr "$line" : "^==\+\([[:digit:]]\+\)$"`
          if [ -z $num ]; then readnum=0; fi
        fi
        ;;
      -1 ) # input
        if [ $readnum != 0 ]; then
          TESTIS[$TESTIONUM]+="\n$line"
          ((readnum--))
        elif [[ "$line" =~ ^==+ ]]; then
          # if what we read was known to be successive
          # they were actually all comments
          if [ $wheiof == 1 ]; then
            # now it's explicit
            wheiof=0
            TESTIS[$TESTIONUM]=
            wheio=-1
            readnum=`expr "$line" : "^--\+\([[:digit:]]\+\)$"`
            if [ -z $readnum ]; then readnum=0; fi
          else # if what we read was explicit
            # repeated =====
            error=1
          fi
        elif [[ "$line" =~ ^--+ ]]; then
          wheio=1
          readnum=`expr "$line" : "^--\+\([[:digit:]]\+\)$"`
          if [ -z $num ]; then readnum=0; fi
        else
          TESTIS[$TESTIONUM]+="\n$line"
        fi
        ;;
      1 ) # output
        if [ $readnum != 0 ]; then
          TESTOS[$TESTIONUM]+="\n$line"
          ((readnum--))
        elif [[ "$line" =~ ^==+ ]]; then
          ((TESTIONUM++))
          # erasing previouse variables
          TESTIS[$TESTIONUM]=
          TESTOS[$TESTIONUM]=
          wheio=-1
          wheiof=1
          readnum=`expr "$line" : "^==\+\([[:digit:]]\+\)$"`
          if [ -z $readnum ]; then readnum=0; fi
        elif [[ "$line" =~ ^--+ ]]; then
          # repeated -----
          error=1
        else
          TESTOS[$TESTIONUM]+="\n$line"
        fi
        ;;
    esac
    if [ $error != 0 ]; then break; fi
  done < "$TESTIONAME"


  # if last lines were comments
  if [ $wheio == -1 -a $wheiof == 1 ]; then
    TESTIS[$TESTIONUM]=""
    ((TESTIONUM--))
  fi

  # index number -> length of array
  ((TESTIONUM++))

  #if [ $error != 0 ]; then false;
  #  # wheio should be -1 (input) when it's end
  # else [ $wheio != -1 ]; fi
  if [ $error != 0 ] || [ $wheio == -1 -a $wheiof == 0 ]; then
    return $lineno # always lineno > 0
  else # parsed successfully
    # eliminate leading newline
    for i in `seq $TESTIONUM`; do
      TESTIS[$[i-1]]=${TESTIS[$[i-1]]:2}
      TESTOS[$[i-1]]=${TESTOS[$[i-1]]:2}
    done
    return 0 # success
  fi
}

#======================================================================
# user-interaction

function b_init_tester {
  argn 0

  if [ -d $WKDIR ]; then
    echo sd repository already exist!
    echo if you want to restart try \"remove\" and then \"init\" again
    return 1
  fi

  if ! mkdir $WKDIR; then return 2; fi
  touch $WKDIR/fig
  mkdir $WKDIR/snap

  srccnds=`ls | grep ".\+\.[a-z]\+$"`
  if [ 1 == `echo $srccnds | wc -l` ]; then
    echo it seems you have only one file in this directory.
    echo -n "do you want to start with \"$srccnds\"? (y/n) "
    read ans
    if [[ "$ans" =~ [yY].* ]]; then
      set_fig SOURCENAME $srccnds
      set_fig COMPNTEST "yes"
    fi
  fi

  return 0;
}

# vertify later works goes well
# satisfy basic dependence
function v_load_tester {
  argn 0

  if ! [ -d $WKDIR ]; then return 1; fi
  if ! [ -d $WKDIR/snap -o -f $WKDIR/fig ]; then return 2; fi

  # load up variables
  # isn't it (sourcing) dangerous?
  source $WKDIR/fig

  # if variable not set yet
  SOURCENAME=${SOURCENAME:-main.c}

  if [ -z "$EXECNAME" ]; then
    EXECNAME=`echo $SOURCENAME | sed "s/^\(.\+\)\.[a-z]\+$/\1/"`
  fi

  TESTIONAME="${TESTIONAME:-iofile}"

  return 0
  # 0 = success, all works fine!
  # 1 = no WKDIR found
  # 2 = required structure of WKDIR damaged
}

function b_compile {
  argn 0

  echo "${CMPLCMD[@]}"
  "${CMPLCMD[@]}" && upmodstate "$EXECNAME" && upmodstate "$SOURCENAME"
  return $?
}

function b_testing {
  argn 0

  local testos=
  local clmwidth=20

  for i in `seq 0 $[TESTIONUM-1]`; do
    echo -e ${TESTIS[$i]} | ./"$EXECNAME" > $WKDIR/testos1
    echo -e ${TESTOS[$i]} > $WKDIR/testos2

    sdiff $WKDIR/testos1 $WKDIR/testos2 > $WKDIR/diffs

    if [ $? != 0 ]; then
      echo === ERROR for input $[i+1] !!
      cat $WKDIR/diffs
      return 1
    fi
  done

  return 0
}

function b_autotesting {
  argn 0

  if [ "$COMPNTEST" == "yes" ]; then
    # always compile before testing
    if b_autocompile; then return 1; fi
  else
    # do not automatically compile before testing
    # compile only when there's no excutable
    if ! b_interactive_vertifysrc; then return 1; fi
    if ! [ -x "$EXECNAME" ]; then
      echo no excutable found named \"$EXECNAME\"
      read -p "may i compile it for you? (Yes, please \ No thanks) " a
      if ! [[ $a =~ [yY].* ]]; then
        echo "it's not y or Y! i'll get that as No"
        return 1;
      fi
      if ! b_autocompile; then return 1; fi
    fi
  fi

  if ! [ -f "$TESTIONAME" ]; then
    echo no iofile yet..
    echo see iofile section of \"sd --help\"
  elif ! v_settestios; then
    echo error on your iofile at line:$?
  else
    b_testing
    return $?
  fi

  return 1
}

function b_autocompile {
  argn 0

  if ! b_interactive_vertifysrc; then return 1; fi

  setcmplneed
  #CHECKME
  if [ $CMPLNEED == 3 ]; then
    echo you have executable compiled manually!
    while true; do
      read -p "would you compile it again with sd? (y or n) " ans
      case $ans in
        [Yy]* ) `b_compile`; return $? ;;
        [Nn]* ) break ;;
        *     ) echo please answer y or n ;;
      esac
    done

  elif [ $CMPLNEED != 0 ]; then
    if [ -z "$CMPLCMD" ]; then
      local ext=`getextension "$SOURCENAME"`
      setcmplcmdfromext $ext
      if [ -z "${CMPLCMD}" ]; then
        echo extension of your source file is unrecognizable!
        echo "re-set manually by \"sd set SOURCENAME <srcname>\""
        return 1
      fi
    fi
    b_compile
    return $?
  fi

  return 0
}
