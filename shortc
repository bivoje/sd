#!/bin/bash

# exporting variables
# { VERSION
# }

. tester

function updateversion {
  argn 1

  echo $1 > $WKDIR/version
}

function getlinenum {
  argn 1
  wc -l $1 | cut -f1 -d " "
}

function getbytenum {
  argn 1
  wc -c $1 | cut -f1 -d " "
}

function getversionsource {
  argn 1

  # using argn instead of assertion
  if ! [[ "$1" =~ [1-9][0-9]*|^0$ ]]; then echo assert; argn 0; fi

  if [ $1 == $VERSION ]; then
    echo $SOURCENAME
  else
    local tmp=`ls $WKDIR/versions | grep "^$1\."`
    echo $WKDIR/versions/$tmp
  fi
}

function b_init_shortc {
  argn 0

  if ! b_init_tester; then return 1; fi
  mkdir $WKDIR/versions

  updateversion 0

  return 0;
}

function v_load_shortc {
  argn 0

  v_load_tester
  local re=$?
  if [ $re != 0 ]; then return $re; fi

  if ! [ -d $WKDIR/versions ]; then return 11; fi
  if ! [ -f $WKDIR/version ]; then return 12; fi

  VERSION=`cat $WKDIR/version`

  local num=`ls $WKDIR/versions | wc -l`
  if [ $num != $VERSION ]; then return 13; fi

  return 0
  # 0 = success, all works fine!
  # 1 = WKDIR/versions damaged
  # 2 = WKDIR/version damaged
  # 3 = versions are not properly perserved
}

function nextversion {
  argn 0

  local ext=`getextension $SOURCENAME`
  cp $SOURCENAME $WKDIR/versions/$VERSION.$ext
  ((VERSION++))

  updateversion $VERSION
}

function b_autonextversion {
  argn 0

  if ! b_autotesting; then
    return 1
  else
    nextversion
    echo now on source ver. $VERSION
    return 0
  fi
}

function showstat {
  argn 2

  local src1=`getversionsource $1`
  local ln1=$(getlinenum $src1)
  local bn1=$(getbytenum $src1)

  if [ $1 == $2 ]; then
    if [ $1 == $VERSION ]; then
      echo current source is $bytes bytes, $lines lines
    else
      echo source ver.$1 is $bytes bytes, $lines lines
    fi
  else
    local src2=`getversionsource $2`
    local ln2=$(getlinenum $src2)
    local bn2=$(getbytenum $src2)

    local name1=
    local name2=

    local lpp="$ln2"
    local bpp="$bn2"

    case $1 in
      $VERSION ) name1="current src" ;;
      $[VERSION-1] ) name1="latest src" ;;
      * ) name1="src ver.$1" ;;
    esac
    case $2 in
      $VERSION ) name2="current src" ;;
      $[VERSION-1] ) name2="latest src" ;;
      * ) name2="src ver.$2" ;;
    esac

    if [[ $[ln2-ln1] -gt 0 ]]; then
      lpp+="(+"$[ln2-ln1]")"
    elif [[ $[ln2-ln1] -lt 0 ]]; then
      lpp+="("$[ln2-ln1]")"
    fi
    if [[ $[bn2-bn1] -gt 0 ]]; then
      bpp+="(+"$[bn2-bn1]")"
    elif [[ $[bn2-bn1] -lt 0 ]]; then
      bpp+="("$[bn2-bn1]")"
    fi

    echo $name2 is $lpp bytes, $bpp lines by $name1
  fi
}

function b_autostat {
  # no argument checking, it's not fixed
  # argn 3

  if ! b_interactive_vertifysrc; then return 1; fi

  local src1=
  local src2=

  # null string arguments would not be counted
  case $# in
    0 ) if [ $VERSION == 0 ]; then
          # showstat would understand same value of src1 and src2
          # as request to show status of the source
          src1=$VERSION; src2=$VERSION
        else
          src1=$[VERSION-1]; src2=$VERSION
        fi ;;
    1 ) src1=$1; src2=$VERSION ;;
    2 ) src1=$1; src2=$2 ;;
    # using argn instead of assertion
    * ) echo assert; argn 2 ;;
  esac

  if ! [[ "$src1" =~ [1-9][0-9]*|^0$ ]]; then
    echo please specify the version number
    echo \"$src1\" is not recognized as version number
  elif ! [[ "$src2" =~ [1-9][0-9]*|^0$ ]]; then
    echo please specify the version number
    echo \"$src2\" is not recognized as version number
  elif ! [[ 0 -le $src1 ]] || ! [[ $src1 -le $VERSION ]]; then
    echo \"$src1\" is not int the valid range
    echo "specify currect version in range [0, $VERSION]"
  elif ! [[ 0 -le $src2 ]] || ! [[ $src2 -le $VERSION ]]; then
    echo \"$src2\" is not int the valid range
    echo "specify currect version in range [0, $VERSION]"
  else
    showstat $src1 $src2
  fi

  return 0
}

function showdiff {
  argn 2

  local src1=`getversionsource $1`
  local src2=`getversionsource $2`

  local name1=
  local name2=

  case $1 in
    $VERSION ) name1="current src" ;;
    $[VERSION-1] ) name1="latest src" ;;
    * ) name1="src ver.$1" ;;
  esac
  case $2 in
    $VERSION ) name2="current src" ;;
    $[VERSION-1] ) name2="latest src" ;;
    * ) name2="src ver.$2" ;;
  esac

  # outline format is fixed to sdiff default
  printf "%-62s| %-62s\n" "$name1" "$name2"
  echo ============================================================================================================================
  sdiff $src1 $src2
}

function b_autodiff {
  # no argument checking, it's not fixed
  # argn 3

  if ! b_interactive_vertifysrc; then return 1; fi

  local src1=
  local src2=

  # null string arguments would not be counted
  case $# in
    0 ) if [ $VERSION == 0 ]; then
          echo "you are on initial version, nothing to compare with"
          return 1
        else
          src1=$[VERSION-1]; src2=$VERSION
        fi ;;
    1 ) src1=$1; src2=$VERSION ;;
    2 ) src1=$1; src2=$2 ;;
    # using argn instead of assertion
    * ) echo assert; argn 2 ;;
  esac

  if ! [[ "$src1" =~ [1-9][0-9]*|^0$ ]]; then
    echo please specify the version number
    echo \"$src1\" is not recognized as version number
  elif ! [[ "$src2" =~ [1-9][0-9]*|^0$ ]]; then
    echo please specify the version number
    echo \"$src2\" is not recognized as version number
  elif ! [[ 0 -le $src1 ]] || ! [[ $src1 -le $VERSION ]]; then
    echo \"$src1\" is not int the valid range
    echo "specify currect version in range [0, $VERSION]"
  elif ! [[ 0 -le $src2 ]] || ! [[ $src2 -le $VERSION ]]; then
    echo \"$src2\" is not int the valid range
    echo "specify currect version in range [0, $VERSION]"
  else
    showdiff $src1 $src2
  fi

  return 0
}
