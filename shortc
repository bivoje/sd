#!/bin/bash

# exporting variables
# { VERSION
# }

. tester

function updateversion {
  argn 1

  echo $1 > $WKDIR/version
}

function getlinenum {
  argn 1
  wc -l $1 | cut -f1 -d " "
}

function getbytenum {
  argn 1
  wc -c $1 | cut -f1 -d " "
}

function getversionsource {
  argn 1

  # using argn instead of assertion
  if ! [[ "$1" =~ [1-9][0-9]* ]]; then argn 0; fi
  ls $WKDIR/versions | grep "^$1\."
}

function b_init_shortc {
  argn 0

  if ! b_init_tester; then return 1; fi
  mkdir $WKDIR/versions

  updateversion 0

  return 0;
}

function v_load_shortc {
  argn 0

  v_load_tester
  local re=$?
  if [ $re != 0 ]; then return $re; fi

  if ! [ -d $WKDIR/versions ]; then return 11; fi
  if ! [ -f $WKDIR/version ]; then return 12; fi

  VERSION=`cat $WKDIR/version`

  local num=`ls $WKDIR/versions | wc -l`
  if [ $num != $VERSION ]; then return 13; fi

  return 0
  # 0 = success, all works fine!
  # 1 = WKDIR/versions damaged
  # 2 = WKDIR/version damaged
  # 3 = versions are not properly perserved
}

function nextversion {
  argn 0

  local ext=`getextension $SOURCENAME`
  cp $SOURCENAME $WKDIR/versions/$VERSION.$ext
  ((VERSION++))

  updateversion $VERSION
}

function b_autonextversion {
  argn 0

  if ! b_autotesting; then
    return 1
  else
    nextversion
    echo now on source ver. $VERSION
    return 0
  fi
}

function showstat {
  argn 1

  local linenum=0
  local bytenum=0
  local llinenum=0
  local lbytenum=0

  linenum=$(getlinenum $SOURCENAME)
  bytenum=$(getbytenum $SOURCENAME)
  if [ 0 == $VERSION ]; then #inte
    echo current source is $bytes bytes, in $lines lines
  else
    local LASTSRCNAME=$WKDIR/versions/`getversionsource $1`
    llinenum=$(getlinenum $LASTSRCNAME)
    lbytenum=$(getbytenum $LASTSRCNAME)
    echo current source is $bytenum\($[bytenum-lbytenum]\) bytes, in $linenum\($[linenum-llinenum]\) lines
  fi
}

# argument: version number to compare
function b_autostat {
  argn 1

  if ! b_interactive_vertifysrc; then return 1; fi

  # default latest vs. current
  # only supports comparing with current version.
  # sd st 0 4 -> this should be supported
  if ! [[ "$1" =~ [1-9][0-9]* ]]; then
    echo please specify the version number
    echo try \"sd st 0\" to compare current source with initial version
  elif ! [[ 0 -le $1 ]] && [[ $1 -le $VERSION ]]; then
    echo specify currect version in range 0 ~ $VERSION
  else
    showstat $1
  fi

  return 0
}

function showdiff {
  argn 1

  if ! b_interactive_vertifysrc; then return 1; fi

  local cmpver=$1
  local cmpsrc=$WKDIR/versions/`getversionsource $cmpver`

  echo diff ver. $cmpver / $VERSION\(current\)
  sdiff $cmpsrc $SOURCENAME
  l1=$(getlinenum $cmpsrc) #inte
  b1=$(getbytenum $cmpsrc) #inte
  l2=$(getlinenum $SOURCENAME) #inte
  b2=$(getbytenum $SOURCENAME) #inte
  echo $l2\($[l2-l1]\) lines, $b2\($[b2-b1]\) bytes
}

function b_autodiff {
  argn 1

  if ! [[ "$1" =~ [1-9][0-9]* ]]; then
    echo please specify the version number
    echo try \"sd st 0\" to compare current source with initial version
  elif ! [ 0 -le $1 -a $1 -le $VERSION ]; then
    echo specify currect version in range 0 ~ $VERSION
  else
    showdiff $1
  fi

  # default: latest vs. current
  # one specified: $1 vs. current
  # two specified: $1 vs. $2

  return 0
}
